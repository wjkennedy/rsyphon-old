#!/usr/bin/perl -w

#
# Copyright (C) 2010 Brian Elliott Finley
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#


#   2011.03.23  Brian Elliott Finley
#   * Handle preferred library selection when multiple versions are
#     available.

use strict;
use Getopt::Long;
use File::Copy;
use File::Path qw(make_path);
use File::Basename;

$ENV{PATH} = "/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin";


my $L;
my $v;
my $d;
my $help_info = "
Usage: mklibs.bef -L LIBRARY_PATH -d DEST_LIB_DIR BINARY [BINARY...]
        (library path is searched in order specified with -L)
";

GetOptions(
    "L=s"   => \$L,
    "v"     => \$v,
    "d=s"   => \$d,
) || die "$help_info";

unless( (defined $L) and (defined $d) ) {
    print "$help_info\n";
    exit 1;
}

my @binaries = @ARGV;
my @paths = split(/:/, $L);

if(defined $v) {
    print "mklibs.bef:\n";
    print "------------------------------------------------------------------------\n";
    print "> library path (-L):\n";
    foreach(@paths) {
        print ">  $_\n";
    }
    print ">\n> verbose (-v) /* 1=yes, 0=no */:\n>  $v\n";
    print ">\n> destination (-d):\n>  $d\n";
    print ">\n> binaries:\n";
}

my %finders;
foreach my $b (@binaries) {
    print ">  $b\n" if(defined $v);
    my $cmd = "ldd $b";
    open(INPUT,"$cmd|") or die;
    while(<INPUT>) {
        if(m# => /#) {
            my($junk_a, $lib, $junk_c, $lib_target_name) = split(/\s+/, $_);
            $finders{$lib} = $lib_target_name;
        }
    }
    close(INPUT);
}

my %keepers;
print ">\n> Selecting preferred library when multiple versions available:\n" if(defined $v);
foreach my $lib (sort (keys %finders)) {
    foreach my $path (@paths) {
        if ( -e "$path/$lib" ) {
            my $source_lib = "$path/$lib";
            $source_lib =~ s|/+|/|g;
            my $dest_lib = "$d$finders{$lib}";
            $dest_lib =~ s|/+|/|g;
            if ( ! -e "$dest_lib" ) {
                print ">  Using $source_lib\n";
                $keepers{$finders{$lib}} = "$source_lib";
                last;
            }
        }
    }
}
print ">\n" if(defined $v);

print "> Copy libs to their destination:\n" if(defined $v);
foreach my $target_lib (sort keys %keepers) {

    my $source_lib = $keepers{$target_lib};

    # Strip off the leading '/lib/' from the target lib name
    $target_lib =~ s|^/lib/||;

    my $dest_dir = "$d/" . (dirname $target_lib);

    # Remove duplicate slashes for prettiness. -BEF-
    $dest_dir =~ s|/+|/|g;
    make_path("$dest_dir");

    print ">  copy $source_lib  $dest_dir\n" if(defined $v);
    copy("$source_lib","$dest_dir") or die "Copy failed: $!";
}
print ">\n" if(defined $v);

exit 0;


