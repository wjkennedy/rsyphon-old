rsyphon Requires a Custom Upload Procedure

Why it is different
-------------------
Rsyphon clients and servers do not have to be of the same architecture.
An ia64 server can interact with i386 clients.  However, for this to work,
the server must be capable of serving binaries that boot its clients.  This
means that ia64 servers must be able to install a package that contains
i386 binaries.

This is accomplished with boot packages - the packages themselves are
architecture all, but they contain an architecture in the package name -
the architecture of the clients they are intended to serve.

  rsyphon-boot-i386-standard_1.2.3_all.deb
  rsyphon-boot-ia64-standard_1.2.3_all.deb

This is a corner case that is not handled well by Debian's infrastructure,
and makes rsyphon uploads complicated.  The rsyphon source package
currently only creates Arch: all packages - but, the Arch: all packages it
builds change depending on the architecture doing the build.  If you build
on ia64, you'll get the rsyphon-boot-ia64-standard deb.  If you build
on i386, you'll get the rsyphon-boot-i386-standard deb instead.  Builds
won't deal with this, so the maintainer gets to build on all architectures
by hand.  All files need to be uploaded as one build, so the .changes and
.dsc files have to be tweaked by hand.

How to Build/Upload
-------------------
The process I use is to do full builds on each architecture, and perform
a merge at the end.  All packages should be the same on all archs except
for the -boot packages, so in theory you could just build those.  However,
the other packages take an insignificant amount of time to build.

1) Go ahead and do a full dpkg-buildpackage -uc -us on one arch
2) Copy the resultant source package to each other arch, run dpkg-source -x
   on each .dsc & dpkg-buildpackage in each resultant directory.
3) Collect the full set of files from each arch on to one machine, and
   place each set of files in a directory whose name is the arch on which
   it was built:

./i386/rsyphon_0.1.tar.gz
./i386/rsyphon_0.1.dsc
./i386/rsyphon-server_0.1_all.deb
./i386/rsyphon-client_0.1_all.deb
./i386/rsyphon-common_0.1_all.deb
./i386/rsyphon-doc_0.1_all.deb
./i386/rsyphon-server-flamethrowerd_0.1_all.deb
./i386/rsyphon-boot-i386-standard_0.1_all.deb
./i386/rsyphon_0.1_i386.changes
./i386/rsyphon_0.1.dsc.asc
./ia64/rsyphon-boot-ia64-standard_0.1_all.deb
./ia64/rsyphon-client_0.1_all.deb
./ia64/rsyphon-common_0.1_all.deb
./ia64/rsyphon-doc_0.1_all.deb
./ia64/rsyphon-server-flamethrowerd_0.1_all.deb
./ia64/rsyphon-server_0.1_all.deb
./ia64/rsyphon_0.1.dsc
./ia64/rsyphon_0.1.dsc.asc
./ia64/rsyphon_0.1.tar.gz
./ia64/rsyphon_0.1_ia64.changes

4) Copy all of the above files into one directory.
   $ cp i386/* ia64/* all/

5) Merge changes & dsc file - in the debian/ directory, you should find a
   tool called mergechanges.py (and the deb822.py lib).

   $ mergechanges.py i386/ ia64/

   This will look for .changes & .dsc files in the i386 and ia64
   subdirectories, and create merged copies in the current working directory:
     rsyphon_0.1.dsc.new
     rsyphon_0.1_i386+ia64.changes

   Copy these files into your all/ directory, and rename the .dsc file to
   remove the '.new' extension.

6) debsign the combined .changes and upload it.
